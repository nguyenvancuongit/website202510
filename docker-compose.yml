services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vian_blog_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - vian_blog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vian_blog_postgres
    restart: unless-stopped
    # env_file:
    #   - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vian_blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS Backend
  backend:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.backend
      target: production
    container_name: vian_blog_backend
    restart: unless-stopped
    # env_file:
    #   - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      CLIENT_JWT_SECRET: ${CLIENT_JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      CLIENT_URL: ${CLIENT_URL}
      CORS_ORIGINS: ${CORS_ORIGINS}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL}
      RATE_LIMIT_LIMIT: ${RATE_LIMIT_LIMIT}
      LOG_LEVEL: ${LOG_LEVEL}
      ENABLE_REQUEST_LOGGING: ${ENABLE_REQUEST_LOGGING}
      UPLOAD_HOST: ${UPLOAD_HOST}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME}
      MAIL_FROM_EMAIL: ${MAIL_FROM_EMAIL}
      REDIS_URL: ${REDIS_URL}
      TENCENT_SCRET_ID: ${TENCENT_SECRET_ID}
      TENCENT_SCRET_KEY: ${TENCENT_SECRET_KEY}
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    networks:
      - vian_blog_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # NextJS Frontend
  frontend:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.frontend
    container_name: vian_blog_frontend
    restart: unless-stopped
    # env_file:
    #   - .env
    environment:
      NODE_ENV: ${FRONTEND_NODE_ENV}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    networks:
      - vian_blog_network
    depends_on:
      - backend

  # NextJS Landing Page
  landing-page:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.landing-page
    container_name: vian_blog_landing
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
      NEXT_PUBLIC_TENCENT_CAPTCHA_APP_ID: ${NEXT_PUBLIC_TENCENT_CAPTCHA_APP_ID}
      NEXT_PUBLIC_TENCENT_CAPTCHA_SECRET_KEY: ${NEXT_PUBLIC_TENCENT_CAPTCHA_SECRET_KEY}
    ports:
      - "3003:3003"
    # env_file:
    #   - .env
    networks:
      - vian_blog_network
    depends_on:
      - backend

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: vian_blog_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - vian_blog_network
    depends_on:
      - frontend
      - backend
      - landing-page
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  vian_blog_network:
    driver: bridge
